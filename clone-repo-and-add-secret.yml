name: Clone Repos and Add Secrets

on:
  workflow_dispatch:

jobs:
  create-repos:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Fetch GitHub User Info
        run: |
          GIT_NAME=$(curl -s -L -H "Authorization: token ${{ secrets.PRIVATE_SECRET }}" \
                         -H "Accept: application/vnd.github.v3+json" \
                         https://api.github.com/user | jq -r '.login // empty')

          if [[ -z "$GIT_NAME" ]]; then
            echo "❌ Failed to get GitHub username"
            exit 1
          fi

          echo "GIT_NAME=$GIT_NAME" >> $GITHUB_ENV

      - name: Read Full Access Token from File
        run: |
          if [[ ! -f "full_access_token.txt" ]]; then
            echo "❌ full_access_token.txt not found"
            exit 1
          fi

          SECRET_VALUE=$(cat full_access_token.txt)

          if [[ -z "$SECRET_VALUE" ]]; then
            echo "❌ full_access_token.txt is empty"
            exit 1
          fi

          echo "::add-mask::$SECRET_VALUE"
          echo "SECRET_VALUE=$SECRET_VALUE" >> $GITHUB_ENV

      - name: Define repositories
        run: |
          repos=("takerbot" "layeredgebot" "reddiobot")
          new_names=("${GIT_NAME}-taker" "${GIT_NAME}-layeredge" "${GIT_NAME}-reddio")

          echo "repos=${repos[*]}" >> $GITHUB_ENV
          echo "new_names=${new_names[*]}" >> $GITHUB_ENV
          
      - name: Create Repositories from Template
        run: |
          IFS=' ' read -r -a repos <<< "$repos"
          IFS=' ' read -r -a new_names <<< "$new_names"

          for i in "${!repos[@]}"; do
            echo "Creating repository from ${repos[$i]} template..."
            RESPONSE=$(curl -s -L -X POST -H "Authorization: token ${{ secrets.PRIVATE_SECRET }}" \
                 -H "Accept: application/vnd.github.v3+json" \
                 https://api.github.com/repos/Ryanda1106/${repos[$i]}/generate \
                 -d "{\"owner\":\"${GIT_NAME}\",\"name\":\"${new_names[$i]}\",\"private\":false}")

            REPO_URL=$(echo "$RESPONSE" | jq -r '.html_url // empty')

            if [[ -z "$REPO_URL" ]]; then
              echo "❌ Failed repository ${new_names[$i]}"
              exit 1
            fi

            echo "✅ Created repository: ${new_names[$i]} ($REPO_URL)"
          done
      - name: Retrieve Public Keys for Each Repository
        run: |
          IFS=' ' read -r -a new_names <<< "$new_names"

          for repo in "${new_names[@]}"; do
            PUBKEY_RESPONSE=$(curl -s -L -X GET -H "Authorization: token ${{ secrets.PRIVATE_SECRET }}" \
                 -H "Accept: application/vnd.github.v3+json" \
                 -H "X-GitHub-Api-Version: 2022-11-28" \
                 https://api.github.com/repos/${GIT_NAME}/${repo}/actions/secrets/public-key)

            PUBLIC_KEY=$(echo "$PUBKEY_RESPONSE" | jq -r '.key // empty')
            KEY_ID=$(echo "$PUBKEY_RESPONSE" | jq -r '.key_id // empty')

            if [[ -z "$PUBLIC_KEY" ]]; then
              echo "❌ Failed to retrieve public key for ${repo}"
              exit 1
            fi

            echo "PUBLIC_KEY_${repo}=$PUBLIC_KEY" >> $GITHUB_ENV
            echo "KEY_ID_${repo}=$KEY_ID" >> $GITHUB_ENV
            echo "✅ Public key retrieved for ${repo}"
          done
      - name: Install Dependencies
        run: wget https://bash.ryanda.xyz/encryptSecret.js && npm install libsodium-wrappers
        
      - name: Run JavaScript Script to Encrypt Secret
        run: |
          node encryptSecret.js

      - name: Add Secret to Each Repository
        run: |
          IFS=' ' read -r -a new_names <<< "$new_names"

          for repo in "${new_names[@]}"; do
            ENCRYPTED_SECRET_VAR="ENCRYPTED_SECRET_${repo}"
            ENCRYPTED_SECRET=${!ENCRYPTED_SECRET_VAR}
            KEY_ID_VAR="KEY_ID_${repo}"
            KEY_ID=${!KEY_ID_VAR}

            if [[ -z "$ENCRYPTED_SECRET" || -z "$KEY_ID" ]]; then
              echo "❌ Skipping secret addition for ${repo}"
              exit 1
            fi

            RESPONSE=$(curl -s -L -o /dev/null -w "%{http_code}" -X PUT -H "Authorization: token ${{ secrets.PRIVATE_SECRET }}" \
                 -H "Accept: application/vnd.github.v3+json" \
                 https://api.github.com/repos/${GIT_NAME}/${repo}/actions/secrets/PRIVATE_SECRET \
                 -d "{\"encrypted_value\":\"$ENCRYPTED_SECRET\",\"key_id\":\"$KEY_ID\"}")

            if [[ "$RESPONSE" -ne 201 && "$RESPONSE" -ne 204 ]]; then
              echo "❌ Failed to add secret to ${repo} (HTTP $RESPONSE)"
              exit 1
            fi

            echo "✅ Added secret to ${repo}"
          done